// src/config/constants.ts
import * as dotenv from 'dotenv';
import * as path from 'path';

// Load environment variables from .env file
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

export interface TimeFrame {
  startDate: string;
  startTime: string;
  endDate: string;
  endTime: string;
}

export interface FormConfig {
  timeFrame: TimeFrame;

  // BAR SETTINGS
  barType: 'time' | 'tick'; // 'time' = minute bars; 'tick' = tick bars
  barSize: number; // minutes if 'time', ticks if 'tick'
  cvdLookBackBars?: number; // count of bars (of chosen type) to look back

  // INDICATORS
  emaMovingAverage?: number;
  adxThreshold?: number;

  // RISK
  contractSize: number;
  stopLoss: number;
  takeProfit: number;

  // OPTIONAL EXTRAS
  rMultiple?: number;
  maxDailyLoss?: number;
  maxPositions?: number;
  leverage?: number;
}

// only the bare minimum defaults for flow control
const DEFAULTS = {
  PAGE_MS: 5 * 60 * 1000,
  BAR_TYPE: 'tick' as 'time' | 'tick',
  WINDOW_SIZE: 5,
  TOL_PCT: 0.001,
  R_MULTIPLE: 2,
};
let dynamicConfig: Record<string, any> = { ...DEFAULTS };

export function updateConfig(formData: FormConfig) {
  // 1) minute vs tick bars
  if (formData.barType === 'time') {
    dynamicConfig.BAR_TYPE = 'time';
    dynamicConfig.PAGE_MS = formData.barSize * 60_000;
  } else {
    dynamicConfig.BAR_TYPE = 'tick';
    dynamicConfig.TICK_SIZE = formData.barSize;
  }

  // 2) CVD lookback
  if (formData.cvdLookBackBars != null) {
    dynamicConfig.WINDOW_SIZE = formData.cvdLookBackBars;
  }

  // 3) other indicators
  if (formData.emaMovingAverage != null) {
    dynamicConfig.EMA_PERIOD = formData.emaMovingAverage;
  }
  if (formData.adxThreshold != null) {
    dynamicConfig.ADX_THRESHOLD = formData.adxThreshold;
  }

  // 4) risk settings
  dynamicConfig.CONTRACT_SIZE = formData.contractSize;
  dynamicConfig.STOP_LOSS = formData.stopLoss;
  dynamicConfig.TAKE_PROFIT = formData.takeProfit;

  if (formData.rMultiple != null) dynamicConfig.R_MULTIPLE = formData.rMultiple;
  if (formData.maxDailyLoss != null)
    dynamicConfig.MAX_DAILY_LOSS = formData.maxDailyLoss;
  if (formData.maxPositions != null)
    dynamicConfig.MAX_POSITIONS = formData.maxPositions;
  if (formData.leverage != null) dynamicConfig.LEVERAGE = formData.leverage;
}

export function buildDateStrings(tf: TimeFrame) {
  return {
    start: `${tf.startDate}T${tf.startTime}:00-04:00`,
    end: `${tf.endDate}T${tf.endTime}:00-04:00`,
  };
}

export const CONFIG = {
  get PAGE_MS() {
    return dynamicConfig.PAGE_MS;
  },
  get BAR_TYPE() {
    return dynamicConfig.BAR_TYPE;
  },
  get TICK_SIZE() {
    return dynamicConfig.TICK_SIZE;
  },
  get WINDOW_SIZE() {
    return dynamicConfig.WINDOW_SIZE;
  },
  get TOL_PCT() {
    return dynamicConfig.TOL_PCT;
  },
  get R_MULTIPLE() {
    return dynamicConfig.R_MULTIPLE;
  },

  get EMA_PERIOD() {
    return dynamicConfig.EMA_PERIOD;
  },
  get ADX_THRESHOLD() {
    return dynamicConfig.ADX_THRESHOLD;
  },

  get CONTRACT_SIZE() {
    return dynamicConfig.CONTRACT_SIZE;
  },
  get STOP_LOSS() {
    return dynamicConfig.STOP_LOSS;
  },
  get TAKE_PROFIT() {
    return dynamicConfig.TAKE_PROFIT;
  },
  get MAX_DAILY_LOSS() {
    return dynamicConfig.MAX_DAILY_LOSS;
  },
  get MAX_POSITIONS() {
    return dynamicConfig.MAX_POSITIONS;
  },
  get LEVERAGE() {
    return dynamicConfig.LEVERAGE;
  },

  DATABENTO: {
    DATASET: 'GLBX.MDP3',
    SCHEMA: 'trades',
    SYMBOL: 'MESU5',
    API_URL: 'https://hist.databento.com/v0/timeseries.get_range',
  },

  OPTIMIZE: {
    MIN_STEP: 1e-4,
    MAX_ITERS_MULTIPLIER: 20,
    MAX_NO_IMPROVE_MULTIPLIER: 5,
  },
} as const;

export const getApiKey = (): string => {
  const key =
    process.env.DATABENTO_API_KEY || 'db-XTiaLkTXu7VDC4jTvSpVwXGwqa9Pw';
  if (!key)
    throw new Error('‚ùå Please set DATABENTO_API_KEY in your .env file');
  return key;
};

export function resetConfig() {
  dynamicConfig = { ...DEFAULTS };
}
